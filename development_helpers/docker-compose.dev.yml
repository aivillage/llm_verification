version: '2'
# docker-compose -f docker-compose.dev.yml up


services:
  ctfd_llmv:
    # LLMV: Change Dockerfile to development version.
    container_name: ctfd_llmv
    build:
      context: ../
      dockerfile: development_helpers/Dockerfile.dev
    user: root
    restart: always
    ports:
      - "8000:8000"
    environment:
      - LLMV_ROUTER_URL=http://llm_router:8000
      - LLMV_ROUTER_TOKEN=NotUsedInDev
      - UPLOAD_FOLDER=/var/uploads
      - DATABASE_URL=mysql+pymysql://ctfd:ctfd@db/ctfd
      - REDIS_URL=redis://cache:6379
      - WORKERS=1
      - LOG_FOLDER=/var/log/CTFd
      - ACCESS_LOG=-
      - ERROR_LOG=-
      - REVERSE_PROXY=true
    volumes:
      - ../.data/CTFd/logs:/var/log/CTFd
      - ../.data/CTFd/uploads:/var/uploads

      # I'm not sure what this is but its breaking docker compose
      # I believe it was copying over all of ctfd for development
      # - ../:/opt/CTFd:ro
    depends_on:
      - db
      - llm_router
      - cache
    networks:
        default:
        internal:

  llm_router:
    image: aivillage/llm_router:dev
    user: root
    restart: always
    volumes:
      - ../mock.json:/opt/models/mock.json
    environment:
      - REDIS_URL=redis://cache:6379
    depends_on:
      - cache
    networks:
        internal:
    healthcheck:
      test: ["CMD", "curl","-f","http://localhost:8000/health"]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 55

  nginx:
    image: nginx:stable
    restart: always
    volumes:
      - ../nginx/http.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - ctfd_llmv

  db:
    image: mariadb:10.4.12
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=ctfd
      - MYSQL_USER=ctfd
      - MYSQL_PASSWORD=ctfd
      - MYSQL_DATABASE=ctfd
    volumes:
      - ../.data/mysql:/var/lib/mysql
    networks:
        internal:
    # This command is required to set important mariadb defaults
    command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]
    healthcheck:
      test: ["executable", "arg"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  cache:
    image: redis:4
    restart: always
    volumes:
    - ../.data/redis:/data
    networks:
        internal:
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 55

networks:
    default:
    internal:
        internal: true
