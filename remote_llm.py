"""RESTful API calls to remote LLMs."""
# Standard library imports.
from logging import getLogger

# Third-party imports.
from requests import post
from requests.exceptions import HTTPError

# LLM Verification Plugin module imports.
from .config_manager import load_llmv_config


log = getLogger(__name__)

def generate_text(prompt):
    """Generate text from a prompt using the EleutherAI GPT-NeoX-20B model.

    Arguments:
        prompt: The prompt to generate text from.

    Raises:
        ValueError: If the Vanilla Neox API key is not set.
        HTTPError: If the EleutherAI API returns a non-200 HTTP status code.

    Returns:
        str: Text generated by the prompt.
    """
    log.info(f'Received text generation request for prompt "{prompt}"')
    # Load the Vanilla Neox API key from the config file.
    llmv_config = load_llmv_config()
    hf_key = llmv_config['huggingface_key']
    url = llmv_config['url']
    if hf_key == 'UNSET':
        raise ValueError('Vanilla Neox API key is not set')
    raw_response = post(url=url,
                        headers={'Authorization': f'Bearer {hf_key}'},
                        json={'inputs': prompt})
    log.debug(f'Received {raw_response.status_code} response from EleutherAI API')
    # If it's a successful HTTP status code, then...
    if raw_response.status_code == 200:
        json_response = raw_response.json()
        log.debug(f'Response content: {json_response}')
        # Ensure that the response is a list.
        if not isinstance(json_response, list):
            raise TypeError(f'Received non-list response from EleutherAI API when a list was expected.')
        # Ensure that only one response item was received.
        if not len(json_response) == 1:
            raise ValueError(f'Received multiple responses when one was expected.')
        # Assume that the text generated by the prompt is in "generated_text" in the first response item.
        generated_text = json_response[0]['generated_text']
        # Remove newlines from the generated text.
        oneline_generation = generated_text.replace('\n', '').strip()
        log.info(f'Received generated text from remote API: {oneline_generation}')
        raw_response = oneline_generation
    elif 400 <= raw_response.status_code <= 599:
        # ... raise an error.
        raise HTTPError(f'EleutherAI API returned error status code {raw_response.status_code}: '
                        f'Response: {raw_response.json()}')
    # ... Otherwise, if it's an unrecognized HTTP status code, then...
    else:
        raise HTTPError(f'EleutherAI API returned unrecognized status code {raw_response.status_code}: '
                        f'Response: {raw_response.json()}')
        raw_response = 'Error generating text.'
    log.info(f'Completed text generation for prompt "{prompt}"')
    return raw_response
